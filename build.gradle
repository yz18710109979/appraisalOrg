/**
 * buildscript必须在顶部，注意位置
 *
 * buildScript代码块中声明是gradle脚本自身需要的资源
 * 可以声明的资源包括依赖项，第三方插件，maven仓库地址等
 * gradle在执行脚本时，会优先执行buildScript代码块中的内容，然后才会执行build脚本
  */
buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }

    repositories {
        // 优先使用国内源
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
    dependencies {
        // 让spring-boot支持gradle
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
/* 所有子项目的通用配置 */
subprojects {
    /* 使用二进制插件 */
    apply plugin: 'java' /* java是Gradle的核心插件，是内置的，内置插件不需要配置依赖路径 */
    apply plugin: 'idea' /* 同上  让Gradle自动生成Intellij的项目文件*/
    /* 注意gradle插件不再自动应用，所以这里需要指定 */
    apply plugin: 'org.springframework.boot'
    /* 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，所以无需在build.gradle配置中明确列出此依赖。 */
    apply plugin: 'io.spring.dependency-management' /* 依赖管理，用来传递spring的依赖 */

    group 'com.jingyou'
    version '1.0-SNAPSHOT'

    sourceCompatibility = 1.8
    /* java编译的时候缺省状态下会因为中文字符而失败 */
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'


    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    /* 添加通用依赖 */
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}